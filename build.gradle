buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    //spring dependency version
    ext['kotlin.version'] = '1.3.31'
    //non-spring version
    ext {
        kotlin_version = '1.3.31'
        spring_boot_version = '2.1.6.RELEASE'
        wx_java_version = '3.4.0'
        kotlin_jackson_version = '2.9.8'
        dokka_version = '0.9.19-SNAPSHOT'
    }

    dependencies {

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

allprojects {
    group 'xyz.seansun'
    version '1.0.0'

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'kotlin-spring'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'


    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        dokkaRuntime "org.jetbrains.dokka:dokka-fatjar:$dokka_version"

        compileOnly "org.springframework.boot:spring-boot-starter-webflux"
        compileOnly "redis.clients:jedis"

        kapt "org.springframework.boot:spring-boot-configuration-processor"
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task kotlinDocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    publishing {
        publications {
            binaryAndSourceAndDoc(MavenPublication) {
                from components.java
                artifact kotlinDocJar
                artifact kotlinSourcesJar
                pom {
                    description = '基于spring security和WxJava的开箱即用服务号starter'
                    url = 'https://gitee.com/lyfuci/Rambutan'
                    name = project.name
                    
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'lyfuci'
                            name = 'sean sun'
                            email = '1194458432@qq.com'
                        }
                    }
                    scm {
                        connection = 'scm:git://git@gitee.com:lyfuci/Rambutan.git'
                        developerConnection = 'scm:ssh://git@gitee.com:lyfuci/Rambutan.git'
                        url = 'https://gitee.com/lyfuci/Rambutan'
                    }
                }
            }
        }

        repositories {
            maven {
//                sonatype
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                credentials  {
                    username=project.property("sonatype.username")
                    password=project.property("sonatype.password")
                }
//                阿里云
//                def releasesRepoUrl = "https://repo.rdc.aliyun.com/repository/75943-release-CfALSh/"
//                def snapshotsRepoUrl = "https://repo.rdc.aliyun.com/repository/75943-snapshot-SZuG3m/"
//                credentials {
//                    username = project.property("aliyun.username")
//                    password = project.property("aliyun.password")
//                }
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }

    signing {
        sign publishing.publications.binaryAndSourceAndDoc
    }

}
